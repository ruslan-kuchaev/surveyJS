// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Roles for users
enum Role {
  COORDINATOR
  RESPONDENT
}

// Survey lifecycle status
enum SurveyStatus {
  DRAFT
  OPEN
  CLOSED
}

// NextAuth models (v4) with custom fields
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  // Custom auth fields
  passwordHash  String?
  role          Role      @default(RESPONDENT)

  // Relations
  accounts      Account[]
  sessions      Session[]
  surveys       Survey[]   @relation("SurveyCreator")
  responses     Response[]

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @map("refresh_token")
  access_token      String?  @map("access_token")
  expires_at        Int?     @map("expires_at")
  token_type        String?  @map("token_type")
  scope             String?
  id_token          String?  @map("id_token")
  session_state     String?  @map("session_state")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Core survey models
model Survey {
  id          String        @id @default(cuid())
  title       String
  status      SurveyStatus  @default(DRAFT)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Creator
  createdById String
  createdBy   User          @relation("SurveyCreator", fields: [createdById], references: [id])

  // Relations
  questions   Question[]
  responses   Response[]
}

model Question {
  id        String   @id @default(cuid())
  surveyId  String
  text      String
  order     Int

  survey    Survey   @relation(fields: [surveyId], references: [id], onDelete: Cascade)
  options   Option[]
  answers   Answer[]

  @@index([surveyId])
}

model Option {
  id         String    @id @default(cuid())
  questionId String
  text       String
  order      Int

  question   Question  @relation(fields: [questionId], references: [id], onDelete: Cascade)
  answers    Answer[]

  @@index([questionId])
}

model Response {
  id        String   @id @default(cuid())
  surveyId  String
  userId    String?
  createdAt DateTime @default(now())

  survey    Survey   @relation(fields: [surveyId], references: [id], onDelete: Cascade)
  user      User?    @relation(fields: [userId], references: [id])
  answers   Answer[]

  // Prevent multiple submissions per user per survey (when userId is set)
  @@unique([surveyId, userId])
  @@index([surveyId])
  @@index([userId])
}

model Answer {
  id          String   @id @default(cuid())
  responseId  String
  questionId  String
  optionId    String

  response    Response @relation(fields: [responseId], references: [id], onDelete: Cascade)
  question    Question @relation(fields: [questionId], references: [id])
  option      Option   @relation(fields: [optionId], references: [id])

  @@unique([responseId, questionId])
  @@index([questionId])
  @@index([optionId])
}
