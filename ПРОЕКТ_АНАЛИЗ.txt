ПОДРОБНЫЙ АНАЛИЗ ПРОЕКТА SURVEYJS
=====================================

ОБЩЕЕ ОПИСАНИЕ
---------------
SurveyJS - это современное веб-приложение для создания и проведения опросов, построенное на Next.js 15 с использованием React 19, TypeScript и Prisma ORM. Приложение реализует систему ролевого доступа (RBAC) с двумя основными ролями: координатор и респондент.

ТЕХНИЧЕСКИЙ СТЕК
-----------------
• Frontend: Next.js 15 (App Router), React 19, TypeScript
• Стилизация: Tailwind CSS 4, CSS Variables, Glassmorphism дизайн
• State Management: Zustand (клиентское состояние), React Hook Form (формы)
• Валидация: Zod (схемы валидации)
• База данных: Prisma ORM, SQLite
• Аутентификация: NextAuth.js 4 (JWT стратегия)
• Графики: Recharts (визуализация результатов)
• Дополнительно: bcryptjs (хеширование паролей), OAuth провайдеры, интернационализация (i18n)

АРХИТЕКТУРА ПРОЕКТА
--------------------

1. СТРУКТУРА ПАПОК:
   src/
   ├── app/                    # Next.js App Router
   │   ├── api/               # API маршруты
   │   ├── admin/             # Админ панель
   │   ├── login/             # Страница входа
   │   ├── surveys/           # Страницы опросов
   │   └── layout.tsx         # Корневой layout
   ├── components/             # Переиспользуемые компоненты
   ├── lib/                   # Утилиты и конфигурации
   ├── stores/                # Zustand stores
   └── middleware.ts          # Next.js middleware

2. МОДЕЛЬ ДАННЫХ (Prisma Schema):
   - User: пользователи с ролями COORDINATOR/RESPONDENT
   - Survey: опросы с статусами DRAFT/OPEN/CLOSED
   - Question: вопросы опроса (1-10 на опрос)
   - Option: варианты ответов (1-5 на вопрос)
   - Response: ответы пользователей
   - Answer: конкретные ответы на вопросы

ПРИНЦИПЫ РАБОТЫ СИСТЕМЫ
------------------------

1. АУТЕНТИФИКАЦИЯ И АВТОРИЗАЦИЯ:
   
   NextAuth.js 4 используется для управления сессиями с JWT стратегией:
   - Поддерживает вход по email/password (с bcrypt хешированием)
   - OAuth провайдеры (Google, GitHub) - опционально
   - Роли хранятся в JWT токене и передаются в сессии
   - Middleware защищает маршруты, требующие роль координатора

   Middleware (src/middleware.ts):
   - Перехватывает запросы к защищенным маршрутам
   - Проверяет JWT токен и роль пользователя
   - Перенаправляет неавторизованных пользователей на /login
   - Защищает: /admin/*, /surveys/new, /surveys/*/edit

2. СИСТЕМА РОЛЕЙ (RBAC):
   
   Две основные роли:
   - COORDINATOR: может создавать, редактировать, удалять опросы
   - RESPONDENT: может проходить опросы и просматривать результаты
   
   Функция requireCoordinator() в lib/rbac.ts:
   - Проверяет сессию и роль пользователя
   - Выбрасывает ошибку FORBIDDEN для неавторизованных
   - Используется в API маршрутах для защиты

3. УПРАВЛЕНИЕ СОСТОЯНИЕМ:
   
   Zustand stores для клиентского состояния:
   - theme.ts: управление светлой/темной темой с персистентностью
   - surveyDraft.ts: автосохранение черновиков опросов в localStorage
   - ui.ts: уведомления и UI состояние

4. ВАЛИДАЦИЯ ДАННЫХ:
    
   Zod схемы для валидации:
   - createSurveySchema: проверяет структуру создаваемого опроса
   - submitResponseSchema: валидирует ответы пользователей
   - Ограничения: 1-10 вопросов, 1-5 вариантов на вопрос

5. ИНТЕРНАЦИОНАЛИЗАЦИЯ (i18n):
   
   Система локализации в src/lib/i18n.ts:
   - Поддержка русского (ru) и английского (en) языков
   - Структурированные переводы по категориям: common, auth, surveys, admin, forms, navigation
   - Функция t(locale, key) для получения переводов по ключам
   - Типизация TranslationKey для TypeScript безопасности
   - Русский язык установлен как defaultLocale

ОСНОВНЫЕ ФУНКЦИИ И ИХ РЕАЛИЗАЦИЯ
----------------------------------

1. СОЗДАНИЕ ОПРОСОВ (/surveys/new):
   
   Страница доступна только координаторам:
   - Динамические формы с React Hook Form
   - useFieldArray для управления вопросами и вариантами
   - Автосохранение черновиков в localStorage через Zustand
   - Валидация через Zod с отображением ошибок
   - API POST /api/surveys создает опрос в базе данных

2. ПРОХОЖДЕНИЕ ОПРОСОВ (/surveys/[id]):
   
   Интерфейс для респондентов:
   - Загрузка опроса по ID через API
   - Интерактивные кнопки для выбора ответов
   - Валидация: все вопросы должны быть отвечены
   - Отправка ответов через POST /api/surveys/[id]/responses
   - Предотвращение повторных ответов (уникальный индекс в БД)

3. ПРОСМОТР РЕЗУЛЬТАТОВ (/surveys/[id]/results):
   
   Визуализация данных:
   - Таблицы с количеством ответов по вариантам
   - Круговые диаграммы через Recharts
   - Цветовая схема для разных вариантов ответов
   - Адаптивный дизайн для мобильных устройств

4. АДМИНИСТРИРОВАНИЕ (/admin):
   
   Панель управления для координаторов:
   - Список всех опросов с пагинацией
   - Изменение статуса: DRAFT → OPEN → CLOSED
   - Редактирование и удаление опросов
   - Уведомления через toast систему

5. УПРАВЛЕНИЕ ТЕМАМИ:
   
   Система тем с CSS переменными:
   - Светлая и темная темы
   - CSS переменные для цветов и градиентов
   - Glassmorphism эффекты с backdrop-filter
   - Персистентность выбора темы в localStorage

ТЕХНИЧЕСКИЕ ОСОБЕННОСТИ
-------------------------

1. GLASSMORPHISM ДИЗАЙН:
   
   Современный UI с эффектами стекла:
   - Полупрозрачные фоны с backdrop-filter: blur()
   - Многослойные тени для глубины
   - Плавные переходы и микроанимации
   - Адаптивные цвета для светлой/темной темы

2. API АРХИТЕКТУРА:
   
   RESTful API с Next.js Route Handlers:
   - GET /api/surveys - список опросов с фильтрацией и пагинацией
   - POST /api/surveys - создание нового опроса
   - PATCH /api/surveys/[id] - обновление статуса
   - DELETE /api/surveys/[id] - удаление опроса
   - POST /api/surveys/[id]/responses - отправка ответов

3. ОБРАБОТКА ОШИБОК:
   
   Многоуровневая система:
   - Валидация на клиенте через Zod
   - Проверка прав доступа в middleware
   - Обработка ошибок API с пользовательскими сообщениями
   - Toast уведомления для обратной связи

4. ПРОИЗВОДИТЕЛЬНОСТЬ:
   
   Оптимизации Next.js 15:
   - App Router с серверными компонентами
   - Turbopack для быстрой разработки
   - Динамические импорты и lazy loading
   - Оптимизированные изображения и шрифты

БЕЗОПАСНОСТЬ
-------------

1. АУТЕНТИФИКАЦИЯ:
   - JWT токены с секретным ключом
   - Хеширование паролей через bcrypt
   - Защищенные API маршруты

2. АВТОРИЗАЦИЯ:
   - Ролевая модель доступа
   - Middleware для защиты маршрутов
   - Проверка прав на уровне API

3. ВАЛИДАЦИЯ:
   - Схемы Zod для всех входных данных
   - Санитизация пользовательского ввода
   - Защита от SQL инъекций через Prisma

4. СЕССИИ:
   - Безопасные HTTP-only куки
   - Автоматическое обновление токенов
   - Защита от CSRF атак

ПОТЕНЦИАЛЬНЫЕ УЛУЧШЕНИЯ
-------------------------

1. ПРОИЗВОДИТЕЛЬНОСТЬ:
   - Кэширование результатов опросов
   - Оптимизация запросов к базе данных
   - Lazy loading для больших списков

2. ФУНКЦИОНАЛЬНОСТЬ:
   - Поддержка различных типов вопросов
   - Экспорт результатов в различные форматы
   - Уведомления о новых опросах

3. БЕЗОПАСНОСТЬ:
   - Rate limiting для API
   - Аудит действий пользователей
   - Двухфакторная аутентификация

4. UX/UI:
   - Прогресс-бары для длинных опросов
   - Автосохранение ответов
   - Мобильная оптимизация
   - Интернационализация (i18n) с поддержкой русского и английского языков

ЗАКЛЮЧЕНИЕ
-----------

SurveyJS представляет собой хорошо структурированное, современное веб-приложение, демонстрирующее лучшие практики разработки на Next.js 15. Проект использует современный стек технологий, реализует безопасную систему аутентификации и авторизации, и предоставляет интуитивно понятный интерфейс для создания и проведения опросов.

Архитектура проекта следует принципам разделения ответственности, с четким разделением между клиентским и серверным кодом. Использование TypeScript обеспечивает типобезопасность, а Prisma ORM упрощает работу с базой данных.

Приложение готово к продакшену и может быть легко развернуто на платформах типа Vercel или Docker контейнерах.
